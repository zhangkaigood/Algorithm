//Java实现：
import java.security.acl.LastOwnerException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class Main {
	static Scanner sc;  //输入流
	static int score;  //得分
	static int time;  //总次数
	static boolean lastTimeIsOne=false; //判断最后一个数是否是1
	static int currentScore=0;  //此次得分
	public static void main(String[] args) {
		sc=new Scanner(System.in);
		while(sc.hasNextInt()){
			time++;
			int st=sc.nextInt();
			if(st==1){
				score++;
				lastTimeIsOne=true;
				currentScore=1;
			}
			else if(st==2){
				if(time==1||lastTimeIsOne){
					currentScore=2;
				}else{
					currentScore+=2;
				}
				score+=currentScore;
				lastTimeIsOne=false;
			}
			else if(st==0){
				lastTimeIsOne=false;
				break;
			}
		}
		System.out.println(score);
	}
}
--------------------- 
//C++实现
#include<bits/stdc++.h>
using namespace std;
int main(){
    int a=1,score=0,num=0;//a存储输入数据，score为最终得分，num为连跳方块中心次数
    while(~scanf("%d",&a)&&a!=0)//数据输入还没完成且a!=0
        if(a==1){//如果a==1
            score+=a;//加上1分
            num=0;//连跳方块中心次数归零
        }else if(a==2)//a==2
            score+=2*(++num);//递增连跳方块中心次数，得分为该次数乘2
    printf("%d",score);
    return 0;
}
--------------------- 
#Python实现
sore,boostsore  = 0,2
nums=list(input().split())
for i in nums:
    if i == '1':
        sore += 1
        boostsore = 2
    elif i == '2':
        sore = sore + boostsore
        boostsore += 2
    elif i == '0':
        break
print(sore)
--------------------- 

